/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404
 */

import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import { Provider } from "react-redux";
import { configureStore } from "@reduxjs/toolkit";
import { NotFound } from "../NotFound";

// Mock –¥–ª—è react-i18next
jest.mock("react-i18next", () => ({
  useTranslation: () => ({
    t: (key: string) => key,
  }),
}));

// Mock –¥–ª—è usePageMetadata
jest.mock("src/hooks", () => ({
  usePageMetadata: jest.fn(),
}));

// Mock –¥–ª—è navigate
const mockNavigate = jest.fn();
jest.mock("react-router-dom", () => ({
  ...jest.requireActual("react-router-dom"),
  useNavigate: () => mockNavigate,
}));

// –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å—Ç–æ—Ä
const createMockStore = () => {
  return configureStore({
    reducer: {
      settings: (state = {}) => state,
    },
  });
};

const renderWithProviders = (component: React.ReactElement) => {
  const store = createMockStore();
  return render(
    <Provider store={store}>
      <MemoryRouter>{component}</MemoryRouter>
    </Provider>
  );
};

describe("NotFound", () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });

  it("should render 404 error message", () => {
    renderWithProviders(<NotFound />);

    expect(screen.getByText("404")).toBeInTheDocument();
    expect(screen.getByText("Oops! Page Not Found")).toBeInTheDocument();
    expect(
      screen.getByText(/It looks like this page has moved/)
    ).toBeInTheDocument();
  });

  it("should render navigation buttons", () => {
    renderWithProviders(<NotFound />);

    expect(screen.getByText("üè† Go Home")).toBeInTheDocument();
    expect(screen.getByText("‚Üê Go Back")).toBeInTheDocument();
    expect(screen.getByText("üéÆ Play Chess")).toBeInTheDocument();
    expect(screen.getByText("üìö Learn Chess")).toBeInTheDocument();
  });

  it("should render chess board", () => {
    renderWithProviders(<NotFound />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª–∞—Å—å (64 –∫–≤–∞–¥—Ä–∞—Ç–∞)
    const chessSquares = screen
      .getAllByRole("generic")
      .filter(
        (element) =>
          element.style.width === "30px" && element.style.height === "30px"
      );

    // –ù–µ –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –∏–∑-–∑–∞ CSS-in-JS, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
    expect(chessSquares.length).toBeGreaterThan(0);
  });

  it("should show countdown timer", () => {
    renderWithProviders(<NotFound />);

    expect(
      screen.getByText(/Automatically redirecting to homepage in \d+ seconds/)
    ).toBeInTheDocument();
  });

  it("should navigate to home when Go Home button is clicked", () => {
    renderWithProviders(<NotFound />);

    const homeButton = screen.getByText("üè† Go Home");
    fireEvent.click(homeButton);

    expect(mockNavigate).toHaveBeenCalledWith("/");
  });

  it("should navigate back when Go Back button is clicked", () => {
    renderWithProviders(<NotFound />);

    const backButton = screen.getByText("‚Üê Go Back");
    fireEvent.click(backButton);

    expect(mockNavigate).toHaveBeenCalledWith(-1);
  });

  it("should navigate to play when Play Chess button is clicked", () => {
    renderWithProviders(<NotFound />);

    const playButton = screen.getByText("üéÆ Play Chess");
    fireEvent.click(playButton);

    expect(mockNavigate).toHaveBeenCalledWith("/play");
  });

  it("should navigate to learn when Learn Chess button is clicked", () => {
    renderWithProviders(<NotFound />);

    const learnButton = screen.getByText("üìö Learn Chess");
    fireEvent.click(learnButton);

    expect(mockNavigate).toHaveBeenCalledWith("/how-to-move");
  });

  it("should auto-redirect after countdown", async () => {
    renderWithProviders(<NotFound />);

    // –£—Å–∫–æ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    jest.advanceTimersByTime(10000);

    await waitFor(() => {
      expect(mockNavigate).toHaveBeenCalledWith("/");
    });
  });

  it("should update countdown every second", async () => {
    renderWithProviders(<NotFound />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    expect(
      screen.getByText(/Automatically redirecting to homepage in 10 seconds/)
    ).toBeInTheDocument();

    // –£—Å–∫–æ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
    jest.advanceTimersByTime(1000);

    await waitFor(() => {
      expect(
        screen.getByText(/Automatically redirecting to homepage in 9 seconds/)
      ).toBeInTheDocument();
    });
  });

  it("should generate random chess board", () => {
    const { rerender } = renderWithProviders(<NotFound />);

    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    rerender(
      <Provider store={createMockStore()}>
        <MemoryRouter>
          <NotFound />
        </MemoryRouter>
      </Provider>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ç–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    expect(screen.getByText("404")).toBeInTheDocument();
  });
});
